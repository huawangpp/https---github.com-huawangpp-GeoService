//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientTest.GeoServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Region", Namespace="http://schemas.datacontract.org/2004/07/Uber.Base")]
    [System.SerializableAttribute()]
    public partial struct Region : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientTest.GeoServiceReference.Location bottomrightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClientTest.GeoServiceReference.Location topleftField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientTest.GeoServiceReference.Location bottomright {
            get {
                return this.bottomrightField;
            }
            set {
                if ((this.bottomrightField.Equals(value) != true)) {
                    this.bottomrightField = value;
                    this.RaisePropertyChanged("bottomright");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientTest.GeoServiceReference.Location topleft {
            get {
                return this.topleftField;
            }
            set {
                if ((this.topleftField.Equals(value) != true)) {
                    this.topleftField = value;
                    this.RaisePropertyChanged("topleft");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/Uber.Base")]
    [System.SerializableAttribute()]
    public partial struct Location : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double latField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double lngField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double lat {
            get {
                return this.latField;
            }
            set {
                if ((this.latField.Equals(value) != true)) {
                    this.latField = value;
                    this.RaisePropertyChanged("lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double lng {
            get {
                return this.lngField;
            }
            set {
                if ((this.lngField.Equals(value) != true)) {
                    this.lngField = value;
                    this.RaisePropertyChanged("lng");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TripData", Namespace="http://schemas.datacontract.org/2004/07/Uber.Base")]
    [System.SerializableAttribute()]
    public partial class TripData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong epochField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string eventTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal fareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double latField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double lngField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint tripIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong epoch {
            get {
                return this.epochField;
            }
            set {
                if ((this.epochField.Equals(value) != true)) {
                    this.epochField = value;
                    this.RaisePropertyChanged("epoch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string eventType {
            get {
                return this.eventTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.eventTypeField, value) != true)) {
                    this.eventTypeField = value;
                    this.RaisePropertyChanged("eventType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal fare {
            get {
                return this.fareField;
            }
            set {
                if ((this.fareField.Equals(value) != true)) {
                    this.fareField = value;
                    this.RaisePropertyChanged("fare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double lat {
            get {
                return this.latField;
            }
            set {
                if ((this.latField.Equals(value) != true)) {
                    this.latField = value;
                    this.RaisePropertyChanged("lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double lng {
            get {
                return this.lngField;
            }
            set {
                if ((this.lngField.Equals(value) != true)) {
                    this.lngField = value;
                    this.RaisePropertyChanged("lng");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint tripId {
            get {
                return this.tripIdField;
            }
            set {
                if ((this.tripIdField.Equals(value) != true)) {
                    this.tripIdField = value;
                    this.RaisePropertyChanged("tripId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GeoServiceReference.IGeoService")]
    public interface IGeoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetTripCountInTime", ReplyAction="http://tempuri.org/IGeoService/GetTripCountInTimeResponse")]
        int GetTripCountInTime(ulong epoch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetTripCountInTime", ReplyAction="http://tempuri.org/IGeoService/GetTripCountInTimeResponse")]
        System.Threading.Tasks.Task<int> GetTripCountInTimeAsync(ulong epoch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetTripCountInRegion", ReplyAction="http://tempuri.org/IGeoService/GetTripCountInRegionResponse")]
        int GetTripCountInRegion(ClientTest.GeoServiceReference.Region r);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetTripCountInRegion", ReplyAction="http://tempuri.org/IGeoService/GetTripCountInRegionResponse")]
        System.Threading.Tasks.Task<int> GetTripCountInRegionAsync(ClientTest.GeoServiceReference.Region r);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetTripSum", ReplyAction="http://tempuri.org/IGeoService/GetTripSumResponse")]
        double GetTripSum(ClientTest.GeoServiceReference.Region r);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/GetTripSum", ReplyAction="http://tempuri.org/IGeoService/GetTripSumResponse")]
        System.Threading.Tasks.Task<double> GetTripSumAsync(ClientTest.GeoServiceReference.Region r);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/UpdateTripData", ReplyAction="http://tempuri.org/IGeoService/UpdateTripDataResponse")]
        void UpdateTripData(ClientTest.GeoServiceReference.TripData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGeoService/UpdateTripData", ReplyAction="http://tempuri.org/IGeoService/UpdateTripDataResponse")]
        System.Threading.Tasks.Task UpdateTripDataAsync(ClientTest.GeoServiceReference.TripData data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGeoServiceChannel : ClientTest.GeoServiceReference.IGeoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GeoServiceClient : System.ServiceModel.ClientBase<ClientTest.GeoServiceReference.IGeoService>, ClientTest.GeoServiceReference.IGeoService {
        
        public GeoServiceClient() {
        }
        
        public GeoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GeoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int GetTripCountInTime(ulong epoch) {
            return base.Channel.GetTripCountInTime(epoch);
        }
        
        public System.Threading.Tasks.Task<int> GetTripCountInTimeAsync(ulong epoch) {
            return base.Channel.GetTripCountInTimeAsync(epoch);
        }
        
        public int GetTripCountInRegion(ClientTest.GeoServiceReference.Region r) {
            return base.Channel.GetTripCountInRegion(r);
        }
        
        public System.Threading.Tasks.Task<int> GetTripCountInRegionAsync(ClientTest.GeoServiceReference.Region r) {
            return base.Channel.GetTripCountInRegionAsync(r);
        }
        
        public double GetTripSum(ClientTest.GeoServiceReference.Region r) {
            return base.Channel.GetTripSum(r);
        }
        
        public System.Threading.Tasks.Task<double> GetTripSumAsync(ClientTest.GeoServiceReference.Region r) {
            return base.Channel.GetTripSumAsync(r);
        }
        
        public void UpdateTripData(ClientTest.GeoServiceReference.TripData data) {
            base.Channel.UpdateTripData(data);
        }
        
        public System.Threading.Tasks.Task UpdateTripDataAsync(ClientTest.GeoServiceReference.TripData data) {
            return base.Channel.UpdateTripDataAsync(data);
        }
    }
}
